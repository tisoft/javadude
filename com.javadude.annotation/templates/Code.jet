<%
/*******************************************************************************
 *  Copyright 2008 Scott Stanchfield.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *******************************************************************************/
%>

<%@ jet package="com.javadude.annotation" class="CodeTemplate" imports="com.javadude.annotation.processors.*" %>

<% Data data = (Data) argument; %>

// CODE GENERATED BY JAVADUDE BEAN ANNOTATION PROCESSOR -- DO NOT EDIT -- WILL BE REGENERATED!
package <%=data.getPackageName()%>;

<%=data.getClassAccess()%>abstract class <%=data.getClassName()%>Gen 
<% if (data.getBean().superclass() != null && !"".equals(data.getBean().superclass())) { %>
		extends <%=data.getBean().superclass()%>
<% } %>
<% if (data.getBean().cloneable()) { %>
		implements java.lang.Cloneable
<% } %>
{
<% for (DelegateSpec delegate : data.getDelegates()) { %>
  <% if (delegate.isNeedToDefine()) { %>
    private <%=delegate.getName()%> <%=delegate.getAccessor()%>;
  <% } %>
<% } %>
    public <%=data.getClassName()%>Gen(<%=data.getBean().superConstructorArgs()%>) {
        <%=data.getBean().superConstructorSuperCall()%>;
<% for (DelegateSpec delegate : data.getDelegates()) { %>
  <% if (delegate.getInstantiateType() != null) { %>
        <%=delegate.getAccessor()%> = new <%=delegate.getInstantiateType()%>();
## TODO - needs better specification of instance creation - might depend on properties... lazy instantiate?
  <% } %>
<% } %>
    }
<% if (data.getBean().cloneable()) { %>
    @Override
    public <%=data.getClassName()%> clone() {
        try {
            return (<%=data.getClassName()%>) super.clone();
        } catch (CloneNotSupportedException e) {
            // will not happen
            return null;
        }
    }
<% } %>
##
## If any bound properties exist, add PropertyChangeSupport and delegate methods for it
##
<% if (data.isAtLeastOneBound()) { %>
    private java.beans.PropertyChangeSupport changeSupport_ = new java.beans.PropertyChangeSupport(this);
    public void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {
        changeSupport_.addPropertyChangeListener(listener);
    }
    public void addPropertyChangeListener(String propertyName, java.beans.PropertyChangeListener listener) {
        changeSupport_.addPropertyChangeListener(propertyName, listener);
    }
    protected void fireIndexedPropertyChange(String propertyName, int index, boolean oldValue, boolean newValue) {
        changeSupport_.fireIndexedPropertyChange(propertyName, index, oldValue, newValue);
    }
    protected void fireIndexedPropertyChange(String propertyName, int index, int oldValue, int newValue) {
        changeSupport_.fireIndexedPropertyChange(propertyName, index, oldValue, newValue);
    }
    protected void fireIndexedPropertyChange(String propertyName, int index, Object oldValue, Object newValue) {
        changeSupport_.fireIndexedPropertyChange(propertyName, index, oldValue, newValue);
    }
    protected void firePropertyChange(java.beans.PropertyChangeEvent event) {
        changeSupport_.firePropertyChange(event);
    }
    protected void firePropertyChange(String propertyName, boolean oldValue, boolean newValue) {
        changeSupport_.firePropertyChange(propertyName, oldValue, newValue);
    }
    protected void firePropertyChange(String propertyName, int oldValue, int newValue) {
        changeSupport_.firePropertyChange(propertyName, oldValue, newValue);
    }
    protected void firePropertyChange(String propertyName, Object oldValue, Object newValue) {
        changeSupport_.firePropertyChange(propertyName, oldValue, newValue);
    }
    public java.beans.PropertyChangeListener[] getPropertyChangeListeners() {
        return changeSupport_.getPropertyChangeListeners();
    }
    public java.beans.PropertyChangeListener[] getPropertyChangeListeners(String propertyName) {
        return changeSupport_.getPropertyChangeListeners(propertyName);
    }
    public void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {
        changeSupport_.removePropertyChangeListener(listener);
    }
    public void removePropertyChangeListener(String propertyName, java.beans.PropertyChangeListener listener) {
        changeSupport_.removePropertyChangeListener(propertyName, listener);
    }
<% } %>
##
## Define simple (non-map, non-list) properties
##
<% for (SimpleProperty p : data.getSimpleProperties()) { %>
    private <%=p.getType()%> <%=p.getName()%>_;
  <% if (p.isReadable()) { %>
    <%=p.getReaderAccess()%><%=p.getType()%> <%=p.isGet()%><%=p.getUpperName()%>() { return <%=p.getName()%>_; }
  <% } %>
  <% if (p.isWriteable()) { %>
    <%=p.getWriterAccess()%>void set<%=p.getUpperName()%>(<%=p.getType()%> value)  {
    <% if (p.isBound()) { %>
        <%=p.getType()%> oldValue = <%=p.getName()%>_;
    <% } %>
        <%=p.getName()%>_ = value;
    <% if (p.isBound()) { %>
        firePropertyChange("<%=p.getName()%>", oldValue, value);
    <% } %>
    }
  <% } %>
<% } %>
##
## Define list properties
##
<% for (ListProperty p : data.getListProperties()) { %>
    private java.util.List<<%=p.getType()%>> <%=p.getPluralName()%>_ = new java.util.ArrayList<<%=p.getType()%>>();
  <% if (p.isReadable()) { %>
    <%=p.getReaderAccess()%><%=p.getType()%> <%=p.isGet()%><%=p.getUpperName()%>(int i) {
        return <%=p.getPluralName()%>_.get(i);
    }
    <%=p.getReaderAccess()%>java.util.List<<%=p.getType()%>> get<%=p.getUpperPluralName()%>() {
        return <%=p.getUnmodPrefix()%><%=p.getPluralName()%>_<%=p.getUnmodSuffix()%>;
    }
    <%=p.getReaderAccess()%>boolean <%=p.getPluralName()%>Contains(<%=p.getType()%> value) {
        return <%=p.getPluralName()%>_.contains(value);
    }
  <% } %>
  <% if (p.isWriteable()) { %>
    <%=p.getWriterAccess()%>void add<%=p.getUpperName()%>(<%=p.getType()%> value) {
        <%=p.getPluralName()%>_.add(value);
    <% if (p.isBound()) { %>
        firePropertyChange("<%=p.getPluralName()%>", null, <%=p.getPluralName()%>_);
    <% } %>
    }
    <%=p.getWriterAccess()%>void add<%=p.getUpperName()%>(int i, <%=p.getType()%> value) {
        <%=p.getPluralName()%>_.add(i, value);
    <% if (p.isBound()) { %>
        firePropertyChange("<%=p.getPluralName()%>", null, <%=p.getPluralName()%>_);
    <% } %>
    }
  <% } %>
<% } %>
##
## Define map properties
##
<% for (MapProperty p : data.getMapProperties()) { %>
    private java.util.Map<<%=p.getKeyType()%>, <%=p.getType()%>> <%=p.getPluralName()%>_ = new java.util.HashMap<<%=p.getKeyType()%>, <%=p.getType()%>>();
  <% if (p.isReadable()) { %>
    <%=p.getReaderAccess()%><%=p.getType()%> get<%=p.getUpperName()%>(<%=p.getKeyType()%> key) {
        return <%=p.getPluralName()%>_.get(key);
    }
    <%=p.getReaderAccess()%>java.util.Map<<%=p.getKeyType()%>, <%=p.getType()%>> get<%=p.getUpperPluralName()%>() {
        return <%=p.getUnmodPrefix()%><%=p.getPluralName()%>_<%=p.getUnmodSuffix()%>;
    }
    <%=p.getReaderAccess()%>boolean <%=p.getPluralName()%>ContainsKey(<%=p.getKeyType()%> key) {
        return <%=p.getPluralName()%>_.containsKey(key);
    }
    <%=p.getReaderAccess()%>boolean <%=p.getPluralName()%>ContainsValue(<%=p.getType()%> value) {
        return <%=p.getPluralName()%>_.containsValue(value);
    }
  <% } %>
  <% if (p.isWriteable()) { %>
    <%=p.getWriterAccess()%>void put<%=p.getUpperName()%>(<%=p.getKeyType()%>} key, <%=p.getType()%> value) {
        <%=p.getPluralName()%>_.put(key, value);
    <% if (p.isBound()) { %>
        firePropertyChange("<%=p.getPluralName()%>", null, <%=p.getPluralName()%>_);
    <% } %>
    }
  <% } %>
<% } %>
##
## Define delegate methods
## TODO fix for methods with generic return values or type parameters
##
<% for (DelegateSpec d : data.getDelegates()) { %>
  <% for (Method m : d.getMethods()) { %>
    <% if (d.isOverriding()) { %>
    @Override
    <% } %>
    public <%=m.getReturnType()%> <%=m.getName()%>(<%=m.getArgDecls()%>)<%=m.getThrowsClause()%> {
        <%=m.getReturnOrNot()%><%=d.getAccessor()%>.<%=m.getName()%>(<%=m.getArgs()%>);
    }
  <% } %>
<% } %>
##
## Define null-object implementation methods
##
<% for (Listener n : data.getNullImplementations()) { %>
  <% for (Method m : n.getMethods()) { %>
    <% if (n.isOverriding()) { %>
    @Override
    <% } %>
    public <%=m.getReturnType()%> <%=m.getName()%>(<%=m.getArgDecls()%>)<%=m.getThrowsClause()%> {
        <%=m.getNullBody()%>
    }
  <% } %>
<% } %>
##
## Define event-set management/fire methods
## TODO - what if the methods are declared to throw exceptions (like PropertyVetoException)?
##
<% for (Listener l : data.getListeners()) { %>
    private java.util.List<<%=l.getName()%>> <%=l.getLowerName()%>s_ = new java.util.ArrayList<<%=l.getName()%>>();
    public void add<%=l.getNameWithoutPackage()%>(<%=l.getName()%> listener) {
        synchronized(<%=l.getLowerName()%>s_) {
            <%=l.getLowerName()%>s_.add(listener);
        }
    }
    public void remove<%=l.getNameWithoutPackage()%>(<%=l.getName()%> listener) {
        synchronized(<%=l.getLowerName()%>s_) {
            <%=l.getLowerName()%>s_.remove(listener);
        }
    }
  <% for (Method m : l.getMethods()) { %>
    protected void fire<%=m.getUpperName()%>(<%=m.getArgDecls()%>) {
        java.util.List<<%=l.getName()%>> targets = null;
        synchronized(<%=l.getLowerName()%>s_) {
            targets = new java.util.ArrayList<<%=l.getName()%>>(<%=l.getLowerName()%>s_);
        }
        for (<%=l.getName()%> listener : targets) {
            listener.<%=m.getName()%>(<%=m.getArgs()%>);
        }
    }
  <% } %>
<% } %>
##
## Define simple equals() and hashCode() methods
##
<% if (data.getBean().defineSimpleEqualsAndHashCode()) { %>
    protected boolean checkEquals(Object o1, Object o2) {
        if (o1 == o2) {
            return true;
        }
        if (o1 == null || o2 == null) {
            return false;
        }
        return o1.equals(o2);
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == this) {
            return true;
        }
  <% if (data.getBean().equalsShouldCheckSuperEquals()) { %>
        if (obj == null || obj.getClass() != getClass() || !super.equals(obj)) {
  <% } else { %>
        if (obj == null || obj.getClass() != getClass()) {
  <% } %>
            return false;
        }
        <%=data.getClassName()%>Gen other = (<%=data.getClassName()%>Gen) obj;
        return
  <% data.reset(" &&", ";"); %>
  <% for (SimpleProperty p : data.getSimpleProperties()) { %>
    <% data.inc(); %>
    <% if (p.isPrimitive()) { %>
            other.<%=p.getName()%>_ == <%=p.getName()%>_<%=data.getOp()%>
    <% } else { %>
            checkEquals(other.<%=p.getName()%>_, <%=p.getName()%>_)<%=data.getOp()%>
    <% } %>
  <% } %>
  <% for (ListProperty p : data.getListProperties()) { %>
    <% data.inc(); %>
            checkEquals(other.<%=p.getPluralName()%>_, <%=p.getPluralName()%>_)<%=data.getOp()%>
  <% } %>
  <% for (MapProperty p : data.getMapProperties()) { %>
    <% data.inc(); %>
            checkEquals(other.<%=p.getPluralName()%>_, <%=p.getPluralName()%>_)<%=data.getOp()%>
  <% } %>
    }
    @Override
    public int hashCode() {
        return super.hashCode() +
  <% data.reset(" +", ";"); %>
  <% for (SimpleProperty p : data.getSimpleProperties()) { %>
    <% data.inc(); %>
            <%=p.getIntConversion()%><%=data.getOp()%>
  <% } %>
  <% for (ListProperty p : data.getListProperties()) { %>
    <% data.inc(); %>
            <%=p.getPluralName()%>_.hashCode()<%=data.getOp()%>
  <% } %>
  <% for (MapProperty p : data.getMapProperties()) { %>
    <% data.inc(); %>
            <%=p.getPluralName()%>_.hashCode()<%=data.getOp()%>
  <% } %>
    }
<% } %>
##
## Define a nice default toString method
##
    @Override
    public String toString() {
        return getClass().getName() + '[' + paramString() + ']';
    }
<% if (data.getBean().overrideParamString()) { %>
    @Override
<% } %>
    protected String paramString() {
<% if (data.getSortedPropertyNames().isEmpty()) { %>
        return "";
<% } else { %>
        return 
  <% data.reset(" +", ";"); %>
  <% for (String propertyName : data.getSortedPropertyNames()) { %>
    <% data.inc(); %>
               "<%=data.getComma()%><%=propertyName%>=" + <%=propertyName%>_<%=data.getOp()%>
    <% data.useComma(); %>
  <% } %>
<% } %>
    }
}
