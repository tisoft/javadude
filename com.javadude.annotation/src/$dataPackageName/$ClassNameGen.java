/*******************************************************************************
 *  Copyright 2008 Scott Stanchfield.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *******************************************************************************/
// CODE GENERATED BY JAVADUDE BEAN ANNOTATION PROCESSOR 
// -- DO NOT EDIT  -  THIS CODE WILL BE REGENERATED! --
package $dataPackageName;

@Dummy class $superClass {
	@Dummy $returnType $methodName() {return null;}
	@Dummy $returnType $nullMethodName() {return null;}
	@Dummy String paramString() {return null;}
}
@Dummy class $className {}
@Dummy class $type {}
@Dummy class $returnType {}
@Dummy class $listenerType {
	@Dummy void $listenerMethodName() {}
}
@Dummy class $keyType {}
@Dummy class $delegateName {
	@Dummy $returnType $methodName() {return null;}
}
@Dummy class $delegateInstantiateType extends $delegateName {}

@ClassAccess abstract class $ClassNameGen
	extends $superClass   																							// superClass
	implements Cloneable  																							// cloneable
{
	@Dummy private $returnType $nullValue;
	@Dummy private int $intConversion;
	
    public $ClassNameGen(/*$superConstructorArgs*/) {
        /*$superConstructorSuperCall*/;
//#foreach delegate
        $delegateAccessor_ = new $delegateInstantiateType(); // instantiateType
//## TODO - needs better specification of instance creation - might depend on properties... lazy instantiate?
//#end foreach delegate
    }
    @Override public $className clone() {																			// cloneable
        try {																										// cloneable
            return ($className) super.clone();																		// cloneable
        } catch (CloneNotSupportedException e) {																	// cloneable
            return null;																							// cloneable
        }																											// cloneable
    }																												// cloneable
//##
//## If any bound properties exist, add PropertyChangeSupport and delegate methods for it
//##
    private java.beans.PropertyChangeSupport propertyChangeSupport_ = new java.beans.PropertyChangeSupport(this);	// atLeastOneBound
    protected java.beans.PropertyChangeSupport getPropertyChangeSupport() { return propertyChangeSupport_; }		// atLeastOneBound
    public void addPropertyChangeListener(java.beans.PropertyChangeListener listener) {								// atLeastOneBound
        getPropertyChangeSupport().addPropertyChangeListener(listener);												// atLeastOneBound
    }																												// atLeastOneBound
    public void addPropertyChangeListener(String propertyName, java.beans.PropertyChangeListener listener) {		// atLeastOneBound
        getPropertyChangeSupport().addPropertyChangeListener(propertyName, listener);								// atLeastOneBound
    }																												// atLeastOneBound
    public void removePropertyChangeListener(java.beans.PropertyChangeListener listener) {							// atLeastOneBound
        getPropertyChangeSupport().removePropertyChangeListener(listener);											// atLeastOneBound
    }																												// atLeastOneBound
    public void removePropertyChangeListener(String propertyName, java.beans.PropertyChangeListener listener) {		// atLeastOneBound
        getPropertyChangeSupport().removePropertyChangeListener(propertyName, listener);							// atLeastOneBound
    }																												// atLeastOneBound
//#foreach property
//## define simple properties */
    private $type $name_;																							// simple
    @ReaderAccess $type get$simple$upperName() { return $name_; }													// simple && readable && !boolean
    @ReaderAccess $type is$simple$upperName() { return $name_; }													// simple && readable && boolean
    @WriterAccess void set$simple$upperName($type value)  {															// simple && writeable
        $type oldValue = $name_;																					// simple && writeable && bound
        $name_ = value;																								// simple && writeable
        getPropertyChangeSupport().firePropertyChange("$name", oldValue, value);									// simple && writeable && bound
    }																												// simple && writeable
//## define list properties
    private java.util.List<$type> $list$pluralName_ = new java.util.ArrayList<$type>();								// list
    @ReaderAccess $type is$list$upperName(int i) { return $list$pluralName_.get(i); }								// list && readable && boolean
    @ReaderAccess $type get$list$upperName(int i) { return $list$pluralName_.get(i); }								// list && readable && !boolean
    @ReaderAccess java.util.List<$type> get$list$upperPluralName() {												// list && readable
        return /*$prefix*/$list$pluralName_/*$suffix*/;																// list && readable
    }																												// list && readable
    @ReaderAccess boolean $list$pluralNameContains($type value) {													// list && readable
        return $list$pluralName_.contains(value);																	// list && readable
    }																												// list && readable
    @WriterAccess void add$list$upperName($type value) {															// list && writeable
        $list$pluralName_.add(value);																				// list && writeable
        getPropertyChangeSupport().firePropertyChange("$list$pluralName", null, $list$pluralName_);					// list && writeable && bound
    }																												// list && writeable
    @WriterAccess void add$list$upperName(int i, $type value) {														// list && writeable
        $list$pluralName_.add(i, value);																			// list && writeable
        getPropertyChangeSupport().firePropertyChange("$list$pluralName", null, $list$pluralName_);					// list && writeable && bound
    }																												// list && writeable
    @WriterAccess void clear$list$upperPluralName() {																// list && writeable
        $list$pluralName_.clear();																					// list && writeable
        getPropertyChangeSupport().firePropertyChange("$list$pluralName", null, $list$pluralName_);					// list && writeable && bound
    }																												// list && writeable
//## define list properties
    private java.util.Set<$type> $set$pluralName_ = new java.util.HashSet<$type>();									// set  
    @ReaderAccess java.util.Set<$type> get$set$upperPluralName() {													// set && readable
        return /*$prefix*/$set$pluralName_/*$suffix*/;																// set && readable
    }																												// set && readable
    @ReaderAccess boolean $set$pluralNameContains($type value) {													// set && readable
        return $set$pluralName_.contains(value);																	// set && readable
    }																												// set && readable
    @WriterAccess void add$set$upperName($type value) {																// set && writeable
        $set$pluralName_.add(value);																				// set && writeable
        getPropertyChangeSupport().firePropertyChange("$set$pluralName", null, $set$pluralName_);					// set && writeable && bound
    }																												// set && writeable
    @WriterAccess void clear$set$upperPluralName() {																// set && writeable
        $set$pluralName_.clear();																					// set && writeable                       
        getPropertyChangeSupport().firePropertyChange("$set$pluralName", null, $set$pluralName_);					// set && writeable && bound
    }																												// set && writeable
//## define map properties
    private java.util.Map<$keyType, $type> $map$pluralName_ = new java.util.HashMap<$keyType, $type>();				// map
    @ReaderAccess $type get$map$upperName($keyType key) {															// map && readable
        return $map$pluralName_.get(key);																			// map && readable
    }																												// map && readable
    @ReaderAccess java.util.Map<$keyType, $type> get$map$upperPluralName() {										// map && readable
        return /*$prefix*/$map$pluralName_/*$suffix*/;																// map && readable
    }																												// map && readable
    @ReaderAccess boolean $map$pluralNameContainsKey($keyType key) {												// map && readable
        return $map$pluralName_.containsKey(key);																	// map && readable
    }																												// map && readable
    @ReaderAccess boolean $map$pluralNameContainsValue($type value) {												// map && readable
        return $map$pluralName_.containsValue(value);																// map && readable
    }																												// map && readable
    @WriterAccess void put$map$upperName($keyType key, $type value) {												// map && writeable
        $map$pluralName_.put(key, value);																			// map && writeable										
        getPropertyChangeSupport().firePropertyChange("$map$pluralName", null, $map$pluralName_);					// map && writeable && bound
    }																												// map && writeable
    @WriterAccess void clear$map$upperPluralName() {																// map && writeable
        $map$pluralName_.clear();																					// map && writeable
        getPropertyChangeSupport().firePropertyChange("$map$pluralName", null, $map$pluralName_);					// map && writeable && bound
    }																												// map && writeable
//#end foreach property
//##
//## Define delegate methods
//##
//#foreach delegate
    private $delegateName $delegateAccessor_; 																		// needToDefine
//#foreach delegate method
    @Override																										// isOverriding
    public $returnType $methodName(/*$argDecls*/)/*$throwsClause*/ {
    	$delegateAccessor_.$methodName(/*$args*/);																	// !return
        return $delegateAccessor_.$methodName(/*$args*/);															// return
    }
//#end foreach delegate method
//#end foreach delegate
//##
//## Define null-object implementation methods
//##
//#foreach null implementation
//#foreach null implementation method
    @Override																										// isOverriding
    public $returnType $nullMethodName(/*$argDecls*/)/*$throwsClause*/ {
    	// do nothing - null object method																			// !return
    	return $nullValue; // null object method																	// return
    }
//#end foreach null implementation method
//#end foreach null implementation
//##
//## Define event-set management/fire methods
//## TODO - what if the methods are declared to throw exceptions (like PropertyVetoException)?
//##
//#foreach listener
    private java.util.List<$listenerType> listeners$listenerType_ = new java.util.ArrayList<$listenerType>();
    public void add$listenerTypeWithoutPackage($listenerType listener) {
        synchronized(listeners$listenerType_) {
        	listeners$listenerType_.add(listener);
        }
    }
    public void remove$listenerTypeWithoutPackage($listenerType listener) {
        synchronized(listeners$listenerType_) {
        	listeners$listenerType_.remove(listener);
        }
    }
//#foreach listener method
    protected void fire$listenerMethodUpperName(/*$argDecls*/) {
        java.util.List<$listenerType> targets = null;
        synchronized(listeners$listenerType_) {
            targets = new java.util.ArrayList<$listenerType>(listeners$listenerType_);
        }
        for ($listenerType listener : targets) {
            listener.$listenerMethodName(/*$args*/);
        }
    }
//#end foreach listener method
//#end foreach listener
//##
//## Define simple equals() and hashCode() methods
//##
    protected boolean checkEquals(Object o1, Object o2) {								// defineSimpleEqualsAndHashCode
        if (o1 == o2) { return true; }													// defineSimpleEqualsAndHashCode
        if (o1 == null || o2 == null) { return false; }									// defineSimpleEqualsAndHashCode
        return o1.equals(o2);															// defineSimpleEqualsAndHashCode
    }																					// defineSimpleEqualsAndHashCode
    @Override public boolean equals(Object obj) {										// defineSimpleEqualsAndHashCode
        if (obj == this) { return true; }												// defineSimpleEqualsAndHashCode
        if (obj == null || obj.getClass() != getClass()									// defineSimpleEqualsAndHashCode
        		|| !super.equals(obj) 													// defineSimpleEqualsAndHashCode && equalsShouldCheckSuperEquals
        ) {																				// defineSimpleEqualsAndHashCode
        	return false;																// defineSimpleEqualsAndHashCode
        }																				// defineSimpleEqualsAndHashCode
        $ClassNameGen other = ($ClassNameGen) obj;										// defineSimpleEqualsAndHashCode
        return																			// defineSimpleEqualsAndHashCode
//#foreach property
            other.$name_ == $name_ &&													// defineSimpleEqualsAndHashCode && simple && primitive
            checkEquals(other.$name_, $name_) &&										// defineSimpleEqualsAndHashCode && simple && !primitive
            checkEquals(other.$list$pluralName_, $list$pluralName_) &&					// defineSimpleEqualsAndHashCode && list
            checkEquals(other.$map$pluralName_, $map$pluralName_) &&					// defineSimpleEqualsAndHashCode && map
            checkEquals(other.$set$pluralName_, $set$pluralName_) &&					// defineSimpleEqualsAndHashCode && set
//#end foreach property
            true;																		// defineSimpleEqualsAndHashCode
    }																					// defineSimpleEqualsAndHashCode
    // ## TODO CHECK STANDARD HASHCODE STUFF WITH PRIME NUMBERS
    @Override public int hashCode() {													// defineSimpleEqualsAndHashCode
        return super.hashCode() +														// defineSimpleEqualsAndHashCode
//#foreach property
            $intConversion +															// defineSimpleEqualsAndHashCode && simple
            $list$pluralName_.hashCode() +												// defineSimpleEqualsAndHashCode && list
            $map$pluralName_.hashCode() +												// defineSimpleEqualsAndHashCode && map
            $set$pluralName_.hashCode() +												// defineSimpleEqualsAndHashCode && set
//#end foreach property
            0;																			// defineSimpleEqualsAndHashCode
    }																					// defineSimpleEqualsAndHashCode
//##
//## Define a nice default toString method
//##
    @Override
    public String toString() {
        return getClass().getName() + '[' + paramString() + ']';
    }
    @Override																			// paramStringOverridden
    protected String paramString() {
    	return 
        	super.paramString() +														// paramStringOverridden
//#foreach property
               "${comma}${name}=" + $name_ +											// simple && !omitFromToString
               "${comma}${pluralName}=" + $list$pluralName_ +							// list && !omitFromToString
               "${comma}${pluralName}=" + $set$pluralName_ +							// set && !omitFromToString
               "${comma}${pluralName}=" + $map$pluralName_ +							// map && !omitFromToString
//#end foreach property
           "";
    }
    public java.util.Map<String, Object> createPropertyMap() {							// createPropertyMap
    	java.util.Map<String, Object> map = new java.util.HashMap<String, Object>();	// createPropertyMap
//#foreach property
		            map.put("$name", is$simple$upperName());							// createPropertyMap && simple && readable && boolean
		            map.put("$name", get$simple$upperName());							// createPropertyMap && simple && readable && !boolean
		            map.put("$list$pluralName", get$list$upperPluralName()); 			// createPropertyMap && list && readable
		            map.put("$set$pluralName", get$set$upperPluralName()); 				// createPropertyMap && set && readable
		            map.put("map$pluralName", get$map$upperPluralName()); 				// createPropertyMap && map && readable
//#end foreach property
        return map;																		// createPropertyMap
    }																					// createPropertyMap
}
